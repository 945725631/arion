// Postgal
// auto-generated source code: main.go
// by arion (https://github.com/straightdave/arion)
package main

import (
    "bytes"
    "encoding/json"
    "flag"
    "fmt"
    "io"
    "io/ioutil"
    "log"
    "net/http"
    "net/url"
    "os"
    "regexp"
    "strings"
    "text/template"
    "time"

    "github.com/golang/protobuf/jsonpb"
    "github.com/golang/protobuf/proto"
    "golang.org/x/net/context"
    "google.golang.org/grpc"

    gozip "github.com/straightdave/gozip/lib"
    "github.com/straightdave/lesphina"
    trunks "github.com/straightdave/trunks/lib"
)

var (
    _les             *lesphina.Lesphina
    _metaData        *MetaData
    _hostList        []string
    _regexMethodPath = regexp.MustCompile(`grpc\.Invoke.+?"(.+?)"`)
    _regexDurFormat  = regexp.MustCompile(`\d+[sm]`)

    // flags
    _ver       = flag.Bool("v", false, "print version info")
    _debug     = flag.Bool("debug", false, "print some debug info (for dev purpose)")
    _serve     = flag.Bool("serve", false, "use PostGal in browser mode")
    _arionHost = flag.String("at", ":9999", "address to host PostGal in browser mode")
    _info      = flag.Bool("i", false, "show info")
    _type      = flag.String("t", "", "data type name")
    _hosts     = flag.String("h", ":8087", "hosts of target service (commas to seperate multiple hosts)")
    _endpoint  = flag.String("e", "", "endpoint name (<svc_name>#<end_name> or just <end_name>) to execute")
    _json      = flag.Bool("json", false, "response in JSON format")
    _massive   = flag.Bool("x", false, "massive call endpoint (needs -rate and -duration)")
    _data      = flag.String("d", "", "request data")
    _dataFile  = flag.String("df", "", "request data file\nData in the file will be read line by line")
    _loop      = flag.Bool("loop", false, "repeat all requests in loops")
    _duration  = flag.Duration("duration", 10*time.Second, "execution duration like 10s, 20m")
    _rate      = flag.Uint64("rate", 1, "execution frequency per second")
)

var _version, _checksum string

func init() {
    flag.Parse()
    _les = lesphina.Restore(_lesDump)
    prepHostList()
    genMetaData()
}

func main() {
    if len(os.Args) == 1 {
        flag.PrintDefaults()
        return
    }

    if *_ver {
        var svcNames []string
        for _, svc := range _metaData.Services {
            svcNames = append(svcNames, svc.Name)
        }
        fmt.Printf("Service:\t%s\n", strings.Join(svcNames, ", "))
        fmt.Printf("Generated:\t%s\n", _version)
        fmt.Printf("Checksum:\t%s\n", _checksum)
        return
    }

    if *_serve {
        realHtml := genHtml(gozip.DecompressString(html2))
        serveStaticContent("/", "text/html", realHtml)
        serveStaticContent("/m.css", "text/css", gozip.DecompressString(css))
        serveStaticContent("/m.js", "text/javascript", gozip.DecompressString(js))
        http.HandleFunc("/type", handleGetType)
        http.HandleFunc("/meta", handleGetMeta)
        http.HandleFunc("/call", handleCallEndpoint)
        srv := &http.Server{Addr: *_arionHost}
        log.Fatal(srv.ListenAndServe())
    }

    if *_info {
        if *_endpoint != "" {
            genAndPrintEndpointInfo(*_endpoint)
            return
        }
        if *_type != "" {
            genAndPrintTypeInfo(*_type)
            return
        }
        genAndPrintOverallInfo()
        return
    }

    if *_endpoint != "" {
        if *_massive {
            massiveCallEndpoint()
            return
        }
        res, err := callEndpoint(_hostList[0], *_endpoint, *_data, *_json)
        if err != nil {
            fmt.Println("ERROR", err)
            return
        }
        fmt.Println(res)
        return
    }
}

func prepHostList() {
    hosts := strings.Trim(*_hosts, " ,") // trim spaces and commas
    _hostList = strings.Split(hosts, ",")
    if len(_hostList) == 0 {
        _hostList = append(_hostList, ":8087")
    }
}

func genAndPrintEndpointInfo(raw string) {
    svcName, endName := parseEndpointName(raw)
    for _, svc := range _metaData.Services {
        if svcName != "" && svc.Name != svcName {
            continue
        }

        for _, end := range svc.Endpoints {
            if end.Name == endName {
                fmt.Printf("%s#%s\n", svc.Name, end.Name)
                fmt.Println("- Request entity:")
                for _, req := range end.ReqElements {
                    fmt.Printf("--- %s %s (json field name: %s)\n", req.Name, req.Type, req.JsonFieldName)
                }
                fmt.Println("- Response entity:")
                for _, res := range end.RespElements {
                    fmt.Printf("--- %s %s (json field name: %s)\n", res.Name, res.Type, res.JsonFieldName)
                }
                break
            }
        }
    }
}

func genAndPrintTypeInfo(typeName string) {
    for _, t := range _metaData.Reference {
        if t.Name == typeName {
            for _, f := range t.Fields {
                fmt.Printf("- %s %s (json field name: %s)\n", f.Name, f.Type, f.JsonFieldName)
            }
            break
        }
    }
}

func genAndPrintOverallInfo() {
    for _, svc := range _metaData.Services {
        fmt.Println(svc.Name)
        for _, e := range svc.Endpoints {
            fmt.Printf("> %s\n", e.Name)
        }
    }
}

func getFullHost(raw string) string {
    if strings.HasPrefix(raw, ":") {
        return "0.0.0.0" + raw
    }
    return raw
}

func getPort(rawAddress string) string {
    splits := strings.Split(rawAddress, ":")
    if len(splits) >= 2 {
        last := splits[len(splits)-1]
        last = strings.TrimSpace(last)
        if last != "" {
            return last
        }
    }
    return "9999"
}

type MetaData struct {
    ArionVersion string
    ArionPort    string
    TargetHost   string
    Services     []ServiceData
    Reference    []Struct
}

type Struct struct {
    Name   string
    Fields []ElementData
}

type ServiceData struct {
    Name      string
    Endpoints []EndpointData
}

type EndpointData struct {
    Name         string
    ReqElements  []ElementData
    RespElements []ElementData
}

type ElementData struct {
    Name          string
    Type          string
    JsonFieldName string
}

func genMetaData() {
    _metaData = &MetaData{
        ArionVersion: _version,
        TargetHost:   getFullHost(_hostList[0]),
        ArionPort:    getPort(*_arionHost),
    }

    rawInterfaces := _les.Query().ByKind(lesphina.KindInterface).ByName("~Client").All()
    for _, intf := range rawInterfaces {
        svc, ok := intf.(*lesphina.Interface)
        if !ok {
            fmt.Println("the obj found is not interface, weird")
            continue
        }

        svcData := ServiceData{
            Name: strings.TrimRight(svc.GetName(), "Client"),
        }

        // each endpoint
        for _, m := range svc.Methods {
            endData := EndpointData{
                Name: m.GetName(),
            }

            // get endpoint's req struct fields
            reqstru := _les.Query().ByKind(lesphina.KindStruct).ByName(m.GetName() + "Request").First()
            if reqstru != nil {
                if st, ok := reqstru.(*lesphina.Struct); ok {
                    for _, f := range st.Fields {
                        endData.ReqElements = append(endData.ReqElements, ElementData{
                            Name:          f.Name,
                            Type:          f.RawType,
                            JsonFieldName: f.JsonFieldName(),
                        })
                    }
                }
            }

            // get endpoint's resp struct fields
            respstru := _les.Query().ByKind(lesphina.KindStruct).ByName(m.GetName() + "Response").First()
            if respstru != nil {
                if st, ok := respstru.(*lesphina.Struct); ok {
                    for _, f := range st.Fields {
                        endData.RespElements = append(endData.RespElements, ElementData{
                            Name:          f.Name,
                            Type:          f.RawType,
                            JsonFieldName: f.JsonFieldName(),
                        })
                    }
                }
            }

            svcData.Endpoints = append(svcData.Endpoints, endData)
        }
        _metaData.Services = append(_metaData.Services, svcData)
    }

    rawAllStructs := _les.Query().ByKind(lesphina.KindStruct).All()
    for _, stru := range rawAllStructs {
        s, ok := stru.(*lesphina.Struct)
        if !ok {
            fmt.Println("the obj found is not Struct, weird")
            continue
        }

        // hide non-exporting structures
        if strings.Title(s.Name) != s.Name {
            continue
        }

        structData := Struct{Name: s.Name}
        for _, f := range s.Fields {
            structData.Fields = append(structData.Fields, ElementData{
                Name:          f.Name,
                Type:          f.RawType,
                JsonFieldName: f.JsonFieldName(),
            })
        }
        _metaData.Reference = append(_metaData.Reference, structData)
    }
}

func genHtml(raw string) string {
    t, err := template.New("html2").Parse(raw)
    if err != nil {
        panic(err)
    }

    var buf bytes.Buffer
    if err := t.Execute(&buf, _metaData); err != nil {
        panic(err)
    }
    return buf.String()
}

func serveStaticContent(path, mime, content string) {
    http.HandleFunc(path, func(w http.ResponseWriter, r *http.Request) {
        defer recoverHandling(w)
        w.Header().Add("Content-Type", mime)
        io.WriteString(w, content)
    })
}

func handleGetType(w http.ResponseWriter, r *http.Request) {
    defer recoverHandling(w)

    typeName := strings.TrimSpace(r.URL.Query().Get("n"))
    if typeName == "" {
        http.Error(w, "lacking of query keyword (n)", http.StatusBadRequest)
        return
    }

    t := _les.Query().ByName(typeName).First()
    switch t.GetKind() {
    case lesphina.KindFunction:
        tt := t.(*lesphina.Function)
        io.WriteString(w, tt.Json())
    case lesphina.KindStruct:
        tt := t.(*lesphina.Struct)
        io.WriteString(w, tt.Json())
    case lesphina.KindElement:
        tt := t.(*lesphina.Element)
        io.WriteString(w, tt.Json())
    default:
        io.WriteString(w, `{"err":"unknown or unsupport type"}`)
    }
}

func handleGetMeta(w http.ResponseWriter, r *http.Request) {
    defer recoverHandling(w)
    io.WriteString(w, _les.Meta.Json())
}

func handleCallEndpoint(w http.ResponseWriter, r *http.Request) {
    defer recoverHandling(w)

    if r.Method != "POST" {
        http.Error(w, "only support POST", http.StatusBadRequest)
        return
    }

    v, err := url.ParseQuery(r.URL.RawQuery)
    if err != nil {
        http.Error(w, err.Error(), http.StatusBadRequest)
        return
    }

    endpointName := v.Get("e")
    if endpointName == "" {
        http.Error(w, "lacking of query keyword (e)", http.StatusBadRequest)
        return
    }

    hostAddr := v.Get("h")
    if hostAddr == "" {
        http.Error(w, "lacking of query keyword (h)", http.StatusBadRequest)
        return
    }

    var respInJson bool
    respFormat := v.Get("format")
    if strings.ToLower(respFormat) == "json" {
        respInJson = true
    }

    body, err := ioutil.ReadAll(r.Body)
    if err != nil {
        http.Error(w, "can't read body", http.StatusBadRequest)
        return
    }

    data := string(body)
    log.Printf("Call %s on %s with data:\n%s\n", endpointName, hostAddr, data)
    res, err := callEndpoint(hostAddr, endpointName, data, respInJson)
    if err != nil {
        log.Println("Err:", err.Error())
        io.WriteString(w, err.Error())
        return
    }
    io.WriteString(w, res)
}

func parseEndpointName(rawName string) (string, string) {
    var svcName, endName string
    i := strings.LastIndex(rawName, "#")
    if i > 0 {
        svcName = rawName[:i]
        endName = rawName[i+1:]
    } else {
        endName = rawName
    }
    return svcName, endName
}

// used in both console and browser modes
func callEndpoint(host, endpoint, data string, respInJson bool) (res string, err error) {
    conn, err := grpc.Dial(host, grpc.WithInsecure(),
        grpc.WithBlock(), grpc.WithTimeout(5*time.Second))
    if err != nil {
        return
    }
    defer conn.Close()

    svcName, endName := parseEndpointName(endpoint)
    method, err := getMethodPath(svcName, endName)
    if err != nil {
        return
    }

    req := getVarByTypeName(endName + "Request")
    if req == nil {
        return "", fmt.Errorf("Failed to get request object")
    }

    reply := getVarByTypeName(endName + "Response")
    if reply == nil {
        return "", fmt.Errorf("Failed to get response object")
    }

    if err = jsonpb.UnmarshalString(data, req); err != nil {
        return
    }

    if err = conn.Invoke(context.Background(), method, req, reply); err != nil {
        return
    }

    if respInJson {
        jsonbytes, err := json.MarshalIndent(reply, "", "    ")
        if err != nil {
            return "", err
        }
        res = string(jsonbytes)
    } else {
        res = reply.String()
    }
    return
}

func massiveCallEndpoint() {
    fmt.Printf("Massive Call on %s...\n", *_endpoint)

    var target *trunks.Gtarget
    if *_dataFile != "" {
        target = prepMultipleReqTarget()
    } else if *_data != "" {
        target = prepSingleReqTarget()
    } else {
        fmt.Println("Please specify either -d or -df")
        return
    }

    var burner *trunks.Burner
    var err error
    if *_loop {
        burner, err = trunks.NewBurner(_hostList, trunks.WithLoop())
    } else {
        burner, err = trunks.NewBurner(_hostList)
    }
    if err != nil {
        panic(err)
    }
    defer burner.Close()

    fmt.Println("Start at", time.Now().Format(time.UnixDate))
    var metrics trunks.Metrics
    startT := time.Now()
    for res := range burner.Burn(target, *_rate, *_duration) {
        metrics.Add(res)
    }
    dur := time.Since(startT)
    metrics.Close()

    fmt.Printf("Duration: %v\n", dur.Seconds())
    fmt.Printf("Total Requests: %d\n", metrics.Requests)
    fmt.Printf("Mean: %s\n", metrics.Latencies.Mean)
    fmt.Printf("50th: %s\n", metrics.Latencies.P50)
    fmt.Printf("95th: %s\n", metrics.Latencies.P95)
    fmt.Printf("99th: %s\n", metrics.Latencies.P99)
    fmt.Printf("Max: %s\n", metrics.Latencies.Max)
}

func prepSingleReqTarget() *trunks.Gtarget {
    svcName, endName := parseEndpointName(*_endpoint)
    method, err := getMethodPath(svcName, endName)
    if err != nil {
        panic(err)
    }

    req := getVarByTypeName(endName + "Request")
    if req == nil {
        panicf("Failed to get request object")
    }

    reply := getVarByTypeName(endName + "Response")
    if reply == nil {
        panicf("Failed to get response object")
    }

    if err = jsonpb.UnmarshalString(*_data, req); err != nil {
        panic(err)
    }

    return &trunks.Gtarget{
        MethodName: method,
        Requests:   []proto.Message{req},
        Response:   reply,
    }
}

func prepMultipleReqTarget() *trunks.Gtarget {
    svcName, endName := parseEndpointName(*_endpoint)
    method, err := getMethodPath(svcName, endName)
    if err != nil {
        panic(err)
    }

    reply := getVarByTypeName(endName + "Response")
    if reply == nil {
        panicf("Failed to get response object")
    }

    bts, err := ioutil.ReadFile(*_dataFile)
    if err != nil {
        panic(err)
    }

    var reqs []proto.Message
    content := string(bts)
    for _, line := range strings.Split(content, "\n") {
        req := getVarByTypeName(endName + "Request")
        if req == nil {
            continue
        }
        if err = jsonpb.UnmarshalString(line, req); err != nil {
            continue
        }
        reqs = append(reqs, req)
    }
    fmt.Printf("with %d requests\n", len(reqs))

    return &trunks.Gtarget{
        MethodName: method,
        Requests:   reqs,
        Response:   reply,
    }
}

// get accurate method path by parsing pb source
// with svc_name and end_name
func getMethodPath(svcName, endName string) (res string, err error) {
    qCandidates := _les.Query().ByKind(lesphina.KindFunction).ByName(endName).All()
    if len(qCandidates) < 1 {
        return "", fmt.Errorf("No function found by name: %s", endName)
    }

    var target *lesphina.Function
    for _, c := range qCandidates {
        if f, ok := c.(*lesphina.Function); ok {
            if len(f.Recv) < 1 {
                continue
            }

            // recv type should end with string 'Client'
            if !strings.HasSuffix(f.Recv[0].BaseType, "Client") {
                continue
            }

            if svcName != "" {
                // if svcName is given, return the first candidate under this svc
                if strings.ToLower(f.Recv[0].BaseType) == strings.ToLower(svcName) {
                    target = f
                    break
                }
            } else {
                // if svcName is not given, return the first candidate
                target = f
                break
            }
        }
    }

    if target == nil {
        return "", fmt.Errorf("Endpoint Not Found (svcName: %s, endName: %s)", svcName, endName)
    }

    rawBody := target.RawBody
    if rawBody == "" {
        return "", fmt.Errorf("Blank endpoint")
    }

    m := _regexMethodPath.FindAllStringSubmatch(rawBody, 1)
    if len(m) > 0 && len(m[0]) > 1 {
        return m[0][1], nil
    }
    return "", fmt.Errorf("No match in rawBody")
}

func recoverHandling(w http.ResponseWriter) {
    if r := recover(); r != nil {
        io.WriteString(w, r.(error).Error())
    }
}

func panicf(f string, v ...interface{}) {
    panic(fmt.Sprintf(f, v...))
}
